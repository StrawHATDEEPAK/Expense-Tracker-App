// Mocks generated by Mockito 5.4.4 from annotations
// in personal_expense_tracker/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:personal_expense_tracker/core/entities/expense.dart' as _i9;
import 'package:personal_expense_tracker/core/entities/user.dart' as _i7;
import 'package:personal_expense_tracker/data/data_sources/firestore_data_sources.dart'
    as _i10;
import 'package:personal_expense_tracker/data/data_sources/local_data_sources.dart'
    as _i8;
import 'package:personal_expense_tracker/data/db/expense_db.dart' as _i2;
import 'package:personal_expense_tracker/domain/repositories/auth_repository.dart'
    as _i5;
import 'package:personal_expense_tracker/domain/repositories/expense_repository.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExpenseDB_0 extends _i1.SmartFake implements _i2.ExpenseDB {
  _FakeExpenseDB_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_1 extends _i1.SmartFake
    implements _i3.FirebaseFirestore {
  _FakeFirebaseFirestore_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAuth_2 extends _i1.SmartFake implements _i4.FirebaseAuth {
  _FakeFirebaseAuth_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i5.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> saveUser(_i7.User? user) => (super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [user],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i7.User?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i6.Future<_i7.User?>.value(),
      ) as _i6.Future<_i7.User?>);

  @override
  _i6.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> register(
    String? name,
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            name,
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i8.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExpenseDB get expenseDB => (super.noSuchMethod(
        Invocation.getter(#expenseDB),
        returnValue: _FakeExpenseDB_0(
          this,
          Invocation.getter(#expenseDB),
        ),
      ) as _i2.ExpenseDB);

  @override
  _i6.Future<void> saveUser(_i7.User? user) => (super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [user],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i7.User?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i6.Future<_i7.User?>.value(),
      ) as _i6.Future<_i7.User?>);

  @override
  _i6.Future<bool> addExpense(_i9.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #addExpense,
          [expense],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<List<_i9.Expense>> getExpenses() => (super.noSuchMethod(
        Invocation.method(
          #getExpenses,
          [],
        ),
        returnValue: _i6.Future<List<_i9.Expense>>.value(<_i9.Expense>[]),
      ) as _i6.Future<List<_i9.Expense>>);

  @override
  _i6.Future<void> deleteExpense(_i9.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #deleteExpense,
          [expense],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateExpense(_i9.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #updateExpense,
          [expense],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [FirestoreDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreDataSource extends _i1.Mock
    implements _i10.FirestoreDataSource {
  MockFirestoreDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_1(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i3.FirebaseFirestore);

  @override
  _i4.FirebaseAuth get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeFirebaseAuth_2(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i4.FirebaseAuth);

  @override
  _i6.Future<bool> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> register(
    String? name,
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            name,
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> addExpense(_i9.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #addExpense,
          [expense],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> syncExpenses(List<_i9.Expense>? expenses) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncExpenses,
          [expenses],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i9.Expense>> getExpenses() => (super.noSuchMethod(
        Invocation.method(
          #getExpenses,
          [],
        ),
        returnValue: _i6.Future<List<_i9.Expense>>.value(<_i9.Expense>[]),
      ) as _i6.Future<List<_i9.Expense>>);

  @override
  _i6.Future<void> deleteExpense(_i9.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #deleteExpense,
          [expense],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateExpense(_i9.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #updateExpense,
          [expense],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ExpenseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseRepository extends _i1.Mock implements _i11.ExpenseRepository {
  MockExpenseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> addExpense(_i9.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #addExpense,
          [expense],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<List<_i9.Expense>> getExpenses() => (super.noSuchMethod(
        Invocation.method(
          #getExpenses,
          [],
        ),
        returnValue: _i6.Future<List<_i9.Expense>>.value(<_i9.Expense>[]),
      ) as _i6.Future<List<_i9.Expense>>);

  @override
  _i6.Future<void> syncExpenses() => (super.noSuchMethod(
        Invocation.method(
          #syncExpenses,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteExpense(_i9.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #deleteExpense,
          [expense],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateExpense(_i9.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #updateExpense,
          [expense],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
